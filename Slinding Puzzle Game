// sliding puzzle game

#include "stdafx.h"
#include <stdlib.h>

#define TRUE 1
#define FALSE 0
#define XSIZE 3
#define YSIZE 3
#define POT '*'

typedef struct node 
  { 
    int xpos; 
    int ypos; 
    int val; 
    char pot; 
    struct node *north;
    struct node *south;
    struct node *east;
    struct node *west;
  }NODE;
  
void init_list();
void print_list();
void input_list(int, int);
void reorg_list();
NODE *found_list(int, int);
int Menu();
void Move_left();
void Move_right();
void Move_up();
void Move_down();
int end_game();

NODE *head;
NODE *tail;
NODE *cur;

//int arr[16] = { 2,5,6,8, 1,3,4,12, 14,9,7,15, 10,11,13 };
int arr[16] = { 1,2,4, 3,5,7, 6,8 };
int cnt = 0;
int movX = 2;
int movY = 2;
int score = 0;

int main()
  { 
     int flag = TRUE;
     
     init_list();
     input_list(0, 0);
     reorg_list(); 
     
     while (flag) 
       { 
         cur = found_list(movX, movY);
         print_list();
         
         switch (Menu())  
           { 
             case 1:   
               Move_up();
               break;
             case 2:   
               Move_down();
               break;
             case 3:   
               Move_left();
               break;
             case 4:   
               Move_right();
               break;  
             case 0:   
               flag = FALSE;
               break;  
             default:   
               printf("Wrong Input !! \n");
               break;  
           } 
           
           if (end_game())
             {   
               printf("Congulation!! \n");
               cur = found_list(movX, movY);
               print_list();
               printf("Your Score : %5d \n", score);
               flag = FALSE;
             } 
       }
  return 0;
}

int Menu()
  { 
    int Menu;
    
    printf("Your Score : %5d \n", score);
    printf("**************\n");
    printf("1. Up \n");
    printf("2. Down \n");
    printf("3. Left \n");
    printf("4. Right \n");
    printf("0. Exit \n");
    printf("**************\n");
    printf("==> ");
    scanf("%d", &Menu);
    return Menu;
  }
  
void Move_right()
  { 
     NODE *temp; 
     
     if ((movX + 1) < XSIZE) 
       {  
         temp = found_list(movX + 1, movY);
         if (temp != NULL)  
           {   
             cur->val = temp->val;
             temp->val = NULL;
             movX++;
             score++;  
           } 
       }
  }
  
void Move_left()
  { 
    NODE *temp;
    
    if ((movX - 1) >= 0) 
      { 
         temp = found_list(movX - 1, movY);
         if (temp != NULL) 
           { 
             cur->val = temp->val;
             temp->val = NULL;
             movX--;
             score++;  
           } 
      }
  }
  
void Move_up()
  { 
     NODE *temp;
     
     if ((movY - 1) >= 0) 
       {  
         temp = found_list(movX, movY - 1);
         if (temp != NULL)  
           {
             cur->val = temp->val;
             temp->val = NULL;
             movY--;
             score++;  
           }
       }
  }
  
void Move_down()
  { 
     NODE *temp; 
     
     if ((movY + 1) < YSIZE) 
       {  
         temp = found_list(movX, movY + 1);
         if (temp != NULL)  
           {   
             cur->val = temp->val;
             temp->val = NULL;
             movY++;
             score++;  
           } 
       }
  }
  
int end_game()
  { 
    NODE *temp;
    int cnt = 0;
    int sum = 0;
    int max = (XSIZE*YSIZE);
    int result = TRUE;
    
    temp = head;
    temp = temp->east; 
    while (temp->east != NULL) 
      {  
        cnt++;
        if ((temp->val != cnt) && (cnt<max))
          result = FALSE;  
        temp = temp->east; 
      }
    return result;
  }
  
void reorg_list()
  { 
    NODE *temp;
    
    temp = head;
    while (temp->east != NULL) 
      {  
        if (temp->ypos<YSIZE)
          temp->south = found_list(temp->xpos, temp->ypos + 1);
        temp = temp->east; 
      }
  }
  
NODE *found_list(int fndX, int fndY)
  { 
    NODE *temp;
    NODE *found = NULL;
    int status = FALSE;
    
    temp = head;
    while (temp->east != NULL)
      {  
        if (temp->xpos == fndX && temp->ypos == fndY)
          {   
             status = TRUE;
             found = temp;  
          }
        temp = temp->east; 
      } 
    return found;
  }
  
void print_list()
  { 
    NODE *temp;
    int prt_cnt = 1;
    
    temp = head; 
    temp = temp->east; 
    //printf("\n+---+---+---+---+\n"); 
    printf("\n+---+---+---+\n"); 
    while (temp->east != NULL) 
      {  
        if (temp->val != NULL)
          {  
            printf("| %2d", temp->val);
          } 
        else
          {   
            printf("| * ");
          }
        if (prt_cnt%XSIZE == 0)
          {  
            printf("|\n");
            prt_cnt = 1;
          }
        else 
          prt_cnt++;
        temp = temp->east;
      }
    //printf("+---+---+---+---+\n");
    printf("+---+---+---+\n");
  }
  
void input_list(int curX, int curY)
  { 
    NODE *newnode;
    NODE *seek_north;
    NODE *seek_south;
    int newX = curX;
    int newY = curY;
    
    newnode = (NODE *)malloc(sizeof(NODE));
    if (newX == 0 && newY == 0) 
      {  
        newnode->xpos = newX;
        newnode->ypos = newY;
        newnode->pot = POT;
        newnode->val = arr[cnt];
        cnt++;
        newnode->north = NULL;
        newnode->south = NULL;
        newnode->east = head->east;
        newnode->west = tail->west;
        head->east = newnode;
        tail->west = newnode;
        newX += 1;  
        input_list(newX, newY); 
      }
    else if (newX < XSIZE && newY < YSIZE) 
      {  
        newnode->xpos = newX;
        newnode->ypos = newY;
        newnode->pot = POT;
        newnode->val = arr[cnt];
        cnt++;
        newnode->north = found_list(newX, newY - 1);
        newnode->south = found_list(newX, newY + 1);
        newnode->east = tail;
        newnode->west = tail->west;
        tail->west->east = newnode;
        tail->west = newnode;
        newX += 1;
        input_list(newX, newY);
      }
    else if (newX == XSIZE) 
      {  
        if ((newY + 1) < YSIZE)  
          {   
            newX = 0;
            newY += 1;
            newnode->xpos = newX;
            newnode->ypos = newY;
            newnode->pot = POT;
            newnode->val = arr[cnt];
            cnt++;
            newnode->north = found_list(newX, newY - 1);
            newnode->south = found_list(newX, newY + 1);
            newnode->east = tail;
            newnode->west = tail->west;
            tail->west->east = newnode;
            tail->west = newnode;
            newX += 1;
            input_list(newX, newY);
          } 
      }
  }
  
void init_list()
  { 
    head = (NODE *)malloc(sizeof(NODE));
    tail = (NODE *)malloc(sizeof(NODE));
    
    head->xpos = NULL;
    head->ypos = NULL;
    head->val = NULL;
    head->pot = POT;
    head->north = NULL;
    head->south = NULL;
    head->east = tail;
    head->west = NULL;
    
    tail->xpos = NULL;
    tail->ypos = NULL;
    tail->val = NULL;
    tail->pot = POT;
    tail->north = NULL;
    tail->south = NULL;
    tail->east = NULL;
    tail->west = head;
  }
